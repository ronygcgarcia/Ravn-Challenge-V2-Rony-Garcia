// *** DO NOT EDIT. GENERATED BY PRISMIX. ***
datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model User {
    id                Int            @id @default(autoincrement())
    email             String         @unique
    password          String
    last_login        String?
    is_suspended      Boolean
    token_valid_after String?
    verified          Boolean
    UserProfile       UserProfile[]  @relation(name: "UserToUserProfile")
    RefreshToken      RefreshToken[] @relation(name: "RefreshTokenToUser")
    Reaction          Reaction[]
    carts             Cart[]
    Order             Order[]

    @@map("users")
}

model Role {
    id          Int           @id @default(autoincrement())
    name        String
    ProfileRole ProfileRole[] @relation(name: "ProfileRoleToRole")

    @@map("roles")
}

model Profile {
    id          Int           @id @default(autoincrement())
    name        String
    ProfileRole ProfileRole[] @relation(name: "ProfileToProfileRole")
    UserProfile UserProfile[] @relation(name: "ProfileToUserProfile")

    @@map("profiles")
}

model ProfileRole {
    profile    Profile @relation(name: "ProfileToProfileRole", fields: [profile_id], references: [id])
    role       Role    @relation(name: "ProfileRoleToRole", fields: [role_id], references: [id])
    profile_id Int
    role_id    Int

    @@id([profile_id, role_id])
    @@map("profiles_roles")
}

model UserProfile {
    profile    Profile @relation(name: "ProfileToUserProfile", fields: [profile_id], references: [id])
    user       User    @relation(name: "UserToUserProfile", fields: [user_id], references: [id])
    profile_id Int
    user_id    Int

    @@id([profile_id, user_id])
    @@map("users_profiles")
}

model RefreshToken {
    id      Int      @id @default(autoincrement())
    token   String
    user    User     @relation(name: "RefreshTokenToUser", fields: [user_id], references: [id])
    user_id Int
    valid   DateTime

    @@map("refresh_token")
}

// SHOP MODELS
model Category {
    id      Int       @id @default(autoincrement())
    name    String
    Product Product[]

    @@map("categories")
}

model ReactionType {
    id       Int        @id @default(autoincrement())
    name     String
    Reaction Reaction[]

    @@map("reaction_types")
}

model ProductImages {
    id         Int     @id @default(autoincrement())
    path       String
    product    Product @relation(fields: [product_id], references: [id])
    product_id Int

    @@map("product_images")
}

model Product {
    id            Int             @id @default(autoincrement())
    name          String
    price         Float
    quantity      Int
    active        Boolean         @default(true)
    category      Category        @relation(fields: [category_id], references: [id])
    category_id   Int
    ProductImages ProductImages[]
    Reaction      Reaction[]
    ProductCart   ProductCart[]
    OrderDetail   OrderDetail[]

    @@map("products")
}

model Reaction {
    user_id          Int
    user             User         @relation(fields: [user_id], references: [id])
    reaction_type_id Int
    reaction_type    ReactionType @relation(fields: [reaction_type_id], references: [id])
    product          Product      @relation(fields: [product_id], references: [id])
    product_id       Int

    @@id([user_id, product_id])
    @@map("reactions")
}

model Cart {
    id          Int           @id @default(autoincrement())
    user_id     Int
    user        User          @relation(fields: [user_id], references: [id])
    ProductCart ProductCart[]

    @@map("carts")
}

model ProductCart {
    cart_id    Int
    cart       Cart    @relation(fields: [cart_id], references: [id])
    product_id Int
    product    Product @relation(fields: [product_id], references: [id])
    quantity   Int

    @@id([cart_id, product_id])
    @@map("products_carts")
}

model OrderStatus {
    id    Int     @id @default(autoincrement())
    name  String
    Order Order[]

    @@map("order_status")
}

model Order {
    id          Int           @id @default(autoincrement())
    order_date  DateTime
    total       Float
    user_id     Int
    user        User          @relation(fields: [user_id], references: [id])
    address     String
    phone       String
    status      OrderStatus   @relation(fields: [status_id], references: [id])
    status_id   Int           @default(1)
    OrderDetail OrderDetail[]

    @@map("orders")
}

model OrderDetail {
    id         Int     @id @default(autoincrement())
    product_id Int
    product    Product @relation(fields: [product_id], references: [id])
    order_id   Int
    order      Order   @relation(fields: [order_id], references: [id])
    quantity   Int

    @@map("order_details")
}
